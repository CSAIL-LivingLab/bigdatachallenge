

TEST1_COUNTS = """0 9
1 0
2 80
3 46
4 20
5 41
6 125
7 79
8 0
9 85
10 4
11 13
12 19
13 64
14 41
15 54
16 1
17 0
18 89
19 103
20 57
21 106
22 21
23 86
24 41
25 72
26 60
27 174
28 43
29 0
30 145
31 59
32 37
33 19
34 33
35 1
36 2
37 56
38 24
39 15
40 38
41 102
42 45
43 0
44 51
45 0
46 4
47 16
48 29
49 8
50 66
51 5
52 0
53 39
54 50
55 49
56 53
57 0
58 53
59 18
60 41
61 25
62 10
63 11
64 0
65 59
66 1
67 10
68 0
69 0
70 14
71 1
72 55
73 36
74 12
75 42
76 147
77 108
78 0
79 54
80 6
81 5
82 8
83 48
84 23
85 111
86 5
87 0
88 84
89 62
90 61
91 65
92 20
93 58
94 20
95 50
96 85
97 25
98 23
99 0
100 134
101 38
102 11
103 5
104 14
105 5
106 0
107 83
108 13
109 57
110 40
111 61
112 34
113 0
114 86
115 4
116 1
117 32
118 24
119 16
120 31
121 3
122 0
123 70
124 74
125 68
126 38
127 0
128 81
129 1
130 81
131 20
132 26
133 25
134 0
135 109
136 10
137 19
138 0
139 0
140 5
141 331
142 5
143 6
144 1
145 0
146 38
147 2
148 1
149 1
150 24
151 10
152 0
153 36
154 0
155 0
156 1
157 13
158 1
159 7
160 0
161 0
162 4
163 41
164 11
165 13
166 0
167 42
168 0
169 32
170 8
171 11
172 1
173 0
174 16
175 4
176 4
177 0
178 0
179 7
180 10
181 1
182 57
183 34
184 38
185 42
186 158
187 108
188 0
189 68
190 3
191 4
192 26
193 52
194 18
195 81
196 0
197 0
198 70
199 81
200 59
201 64
202 13
203 68
204 8
205 63
206 80
207 79
208 38
209 0
210 131
211 43
212 18
213 4
214 20
215 6
216 0
217 58
218 28
219 13
220 32
221 119
222 110
223 0
224 59
225 7
226 12
227 25
228 49
229 11
230 119
231 4
232 0
233 62
234 70
235 69
236 73
237 10
238 62
239 15
240 52
241 64
242 20
243 207
244 0
245 142
246 19
247 8
248 7
249 19
250 0
251 1
252 24
253 17
254 18
255 18
256 87
257 56
258 0
259 23
260 4
261 1
262 24
263 18
264 2
265 22
266 1
267 0
268 38
269 27
270 27
271 30
272 3
273 24
274 1
275 19
276 37
277 14
278 17
279 0
280 64
281 7
282 10
283 4
284 6
285 7
286 0
287 0
288 1
289 0
290 0
291 0
292 1
293 4
294 0
295 2
296 0
297 0
298 0
299 0
300 0
301 3
302 0
303 0
304 2
305 1
306 3
307 0
308 0
309 1
310 2
311 2
312 1
313 2
314 0
315 0
316 2
317 0
318 1
319 1
320 2
321 3
322 0
323 46
324 10
325 20
326 19
327 73
328 25
329 0
330 41
331 4
332 2
333 31
334 27
335 9
336 9
337 1
338 0
339 34
340 39
341 28
342 38
343 1
344 46
345 2
346 34
347 24
348 11
349 24
350 0
351 88
352 7
353 13
354 1
355 1
356 2
357 0
358 43
359 24
360 18
361 32
362 75
363 61
364 0
365 36
366 2
367 4
368 51
369 43
370 5
371 25
372 1
373 0
374 32
375 45
376 34
377 57
378 4
379 44
380 5
381 29
382 55
383 16
384 12
385 0
386 97
387 10
388 12
389 1
390 8
391 1
392 69
393 4
394 33
395 6
396 0
397 21
398 4
399 10
400 14
401 13
402 4
403 0
404 19
405 1
406 1
407 5
408 8
409 4
410 5
411 1
412 0
413 18
414 17
415 11
416 11
417 1
418 19
419 3
420 21
421 11
422 7
423 5
424 0
425 8
426 3
427 8
428 0
429 0
430 1
431 0
432 18
433 8
434 3
435 11
436 9
437 6
438 0
439 18
440 1
441 0
442 6
443 7
444 6
445 8
446 0
447 0
448 10
449 21
450 8
451 24
452 0
453 19
454 1
455 18
456 8
457 3
458 3
459 0
460 27
461 0
462 4
463 0
464 0
465 4
466 0
467 28
468 22
469 9
470 39
471 23
472 4
473 0
474 26
475 1
476 0
477 14
478 16
479 5
480 8
481 2
482 0
483 16
484 22
485 23
486 14
487 0
488 29
489 1
490 26
491 19
492 8
493 14
494 0
495 40
496 2
497 5
498 0
499 0
500 7
501 0
502 77
503 23
504 56
505 48
506 50
507 28
508 0
509 80
510 4
511 0
512 34
513 11
514 14
515 39
516 2
517 0
518 57
519 72
520 52
521 42
522 1
523 78
524 7
525 74
526 31
527 20
528 39
529 0
530 61
531 3
532 13
533 0
534 0
535 8
536 4
537 48
538 14
539 37
540 20
541 134
542 81
543 0
544 46
545 3
546 2
547 27
548 40
549 9
550 111
551 3
552 0
553 63
554 44
555 82
556 47
557 2
558 47
559 15
560 38
561 35
562 12
563 20
564 0
565 83
566 5
567 15
568 2
569 2
570 2
571 0
572 41
573 21
574 19
575 15
576 83
577 73
578 0
579 39
580 2
581 0
582 25
583 27
584 11
585 37
586 2
587 0
588 49
589 49
590 45
591 42
592 0
593 45
594 3
595 29
596 39
597 21
598 25
599 0
600 95
601 9
602 15
603 3
604 1
605 11
606 1
607 37
608 31
609 52
610 42
611 107
612 68
613 0
614 34
615 6
616 3
617 11
618 40
619 9
620 89
621 2
622 0
623 56
624 42
625 68
626 64
627 1
628 41
629 14
630 22
631 34
632 17
633 59
634 0
635 105
636 6
637 19
638 1
639 3
640 1
641 11
642 4
643 0
644 64
645 46
646 30
647 74
648 105
649 149
650 0
651 66
652 4
653 25
654 25
655 39
656 75
657 136
658 0
659 0
660 124
661 105
662 85
663 80
664 14
665 73
666 22
667 56
668 84
669 31
670 94
671 0
672 160
673 76
674 46
675 13
676 22
677 34"""

TEST2_COUNTS = {}
try:
  with file("/home/ubuntu/counts2.txt", 'r') as f:
    for l in f:
      p = map(int, l.split())
      TEST2_COUNTS[p[0]] = p[1]
except:
  pass


CORRECT_DEMANDS = {}
for pair in map(lambda line: map(int, line.split()), TEST1_COUNTS.split('\n')):
  CORRECT_DEMANDS[pair[0]] = pair[1]



# worry about giant ints
def compute_score_breakdown(demands, correct_demands=None):
  if not correct_demands:
    correct_demands = CORRECT_DEMANDS

  errs = []
  for key in correct_demands:
    trueval = correct_demands[key]
    estval = demands.get(key, 0)
    errs.append(trueval - estval)
  return errs

  return 1. / (1. + sum(sqerrs) ** 0.5)




# worry about giant ints
def compute_score(demands, correct_demands=None):
  if not correct_demands:
    correct_demands = CORRECT_DEMANDS

  sqerrs = []
  for key in correct_demands:
    trueval = correct_demands[key]
    estval = demands.get(key, 0)
    err = float(trueval - estval) ** 2
    sqerrs.append(err)

  return 1. / (1. + sum(sqerrs) ** 0.5)

def parse(text=""):
  """
  ARGS:
  text is a the submission as a string

  RETURN:
  dictionary of location -> demand number 
  """
  demands = {}
  lines = text.split("\n")
  for line in lines:
    line = line.strip()
    if not line: continue
    tokens = line.split(" ")
    locid = int(tokens[0])
    demand = int(tokens[1])
    demands[locid] = demand
  return demands
